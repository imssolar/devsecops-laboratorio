name: Workflow
on:
  push:
    branches:
      - main
      - feature/devsecops

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}

      - name: Check for Critical/High/Medium Vulnerabilities with Sonar
        run: |
          RESPONSE=$(curl -s -u '${{secrets.SONAR_TOKEN}}:' 'https://sonarcloud.io/api/issues/search?componentKeys=imssolar_devsecops-laboratorio&resolved=false&types=VULNERABILITY,BUG&ps=1')
          TOTAL=$(echo "$RESPONSE" | jq '.total')
          echo "Total issues (Vulnerability + Bugs): $TOTAL"
          if [ ! -z "$TOTAL" ] && [ "$TOTAL" != "null" ] && [ "$TOTAL" -gt 0 ]; then
               echo "Se encontraron $TOTAL vulnerabilidades. Pipeline falla."
               exit 1
           else
               echo " No se encontraron vulnerabilidades."
           fi
  SCA:
    runs-on: ubuntu-latest
    needs: SAST
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Run npm audit
        run: |
          npm audit --json > npm-audit.json || true
          cat npm-audit.json

      - name: Check for Critical/High Vulnerabilities
        run: |
          CRITICAL=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' npm-audit.json)
          HIGH=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' npm-audit.json)
          MEDIUM=$(jq '.vulnerabilities | to_entries | map(select(.value.severity == "medium")) | length' npm-audit.json)

          echo "Vulnerabilidades encontradas:"
          echo "Critical: $CRITICAL"
          echo "High: $HIGH"
          echo "Medium: $MEDIUM"

          TOTAL=$((CRITICAL + HIGH + MEDIUM))
          echo "TOTAL Vulnerabilidades: $TOTAL"
          if [ "$TOTAL" -gt 0 ]; then
            echo "Se encontraron vulnerabilidades altas/críticas/medidas"
            exit 1
          else
            echo "No se encontraron vulnerabilidades altas/críticas/medias"
          fi

      - name: Upload audit Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-report
          path: npm-audit.json

      - name: Generate Text Report
        if: always()
        run: |
          set +e  # No detenerse en errores
          npm audit > npm-audit-report.txt 2>&1
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          ls -la npm-audit-report.txt
          exit 0  # Siempre retornar éxito

      - name: Upload Text Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-text-report
          path: npm-audit-report.txt
  
  Image-Security:
    runs-on: ubuntu-latest
    needs: SCA
    if: always()
    steps:
      - name: Build Docker Image
        run: |
          echo "Archivos en el directorio actual:"
          ls -la
          echo "Buscando Dockerfile..."
          if [ -f "Dockerfile"]; then
            echo "Dockerfile encontrado!"
          else 
            echo "Dockerfile no encontrado"
          fi
          find . -name "Dockerfile" -o -name "dockerfile"
          docker build -f Dockerfile -t devsecops-laboratorio:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'devsecops-laboratorio:latest'
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Check for Critical/High/Medium Vulnerabilities
        run: |
          CRITICAL=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-report.json)

          echo "Vulnerabilidades Criticas encontradas"

          TOTAL=$((CRITICAL))

          echo "Total Críticas: $CRITICAL"

          if [ "$TOTAL" -gt 0]; then
            echo "Se encontraron vulnerabilidades (por ahora sólo críticas) en la imagen docker"
            exit 1
          else
            echo "No se encontraron vulnerabilidades en la imagen Docker"
          fi
        


             
